# Fly.io Configuration Template for Elixir Phoenix Applications
# Auto-generated by: fly launch
# Documentation: https://fly.io/docs/reference/configuration/

# =============================================================================
# APPLICATION CONFIGURATION
# =============================================================================

# Application name (must be unique across Fly.io)
app = "[APP_NAME]"

# Primary region (choose closest to your users)
primary_region = "[PRIMARY_REGION]"
# Options:
# - gru (São Paulo, Brazil)
# - iad (Virginia, USA)
# - lhr (London, UK)
# - fra (Frankfurt, Germany)
# - nrt (Tokyo, Japan)
# - syd (Sydney, Australia)
# Full list: https://fly.io/docs/reference/regions/

# Kill signal for graceful shutdown
kill_signal = "SIGTERM"

# Grace period for shutdown (BEAM needs time to drain connections)
kill_timeout = "30s"

# =============================================================================
# BUILD CONFIGURATION
# =============================================================================

[build]
  # Use Dockerfile in project root
  # If using different name: dockerfile = "Dockerfile.production"

[env]
  # Phoenix environment
  PHX_HOST = "[APP_NAME].fly.dev"
  PORT = "8080"

  # Distributed Erlang configuration
  ERL_AFLAGS = "-proto_dist inet6_tcp"
  RELEASE_DISTRIBUTION = "name"
  RELEASE_NODE = "[APP_NAME]@[PRIMARY_REGION].vm.fly.dev"

  # BEAM VM optimization
  ERL_MAX_PORTS = "8192"

  # Phoenix configuration
  ECTO_IPV6 = "true"
  DNS_CLUSTER_QUERY = "[APP_NAME].internal"

# =============================================================================
# HTTP SERVICE CONFIGURATION
# =============================================================================

[[services]]
  protocol = "tcp"
  internal_port = 8080
  processes = ["app"]

  # HTTP service configuration
  [[services.ports]]
    port = 80
    handlers = ["http"]

    # Force HTTPS redirect
    force_https = true

  [[services.ports]]
    port = 443
    handlers = ["tls", "http"]

  # Connection limits
  [services.concurrency]
    type = "connections"
    hard_limit = 1000
    soft_limit = 750

  # Health checks
  [[services.tcp_checks]]
    interval = "15s"
    timeout = "5s"
    grace_period = "30s"
    restart_limit = 0

  [[services.http_checks]]
    interval = "30s"
    timeout = "5s"
    grace_period = "30s"
    method = "get"
    path = "/health"
    protocol = "http"
    restart_limit = 0

    # Expected HTTP status codes
    [services.http_checks.headers]

# =============================================================================
# COMPUTE RESOURCES
# =============================================================================

[vm]
  # VM size options:
  # - shared-cpu-1x: 256MB RAM (hobby tier)
  # - shared-cpu-2x: 512MB RAM (small production)
  # - dedicated-cpu-1x: 2GB RAM (production)
  # - dedicated-cpu-2x: 4GB RAM (high-traffic)
  # - dedicated-cpu-4x: 8GB RAM (enterprise)

  size = "[VM_SIZE]"

  # Number of CPUs (dedicated VMs only)
  # cpus = 1

  # Memory in MB (dedicated VMs only)
  # memory_mb = 2048

# =============================================================================
# SCALING CONFIGURATION
# =============================================================================

[scaling]
  # Minimum instances (always running)
  min_machines = [MIN_INSTANCES]

  # Maximum instances (auto-scale up to)
  max_machines = [MAX_INSTANCES]

# Auto-scaling metrics
[[scaling.metrics]]
  type = "requests"
  hard_limit = 750
  soft_limit = 500

[[scaling.metrics]]
  type = "cpu"
  hard_limit = 85
  soft_limit = 70

# =============================================================================
# MULTI-REGION DEPLOYMENT (Optional)
# =============================================================================

# Uncomment to deploy to multiple regions
# [[regions]]
#   region = "gru"  # São Paulo
#   instances = 2
#
# [[regions]]
#   region = "iad"  # Virginia
#   instances = 2
#
# [[regions]]
#   region = "lhr"  # London
#   instances = 1

# =============================================================================
# DATABASE CONFIGURATION (Fly Postgres)
# =============================================================================

# If using Fly Postgres, attach with:
# fly postgres create --name [APP_NAME]-db --region [PRIMARY_REGION]
# fly postgres attach [APP_NAME]-db

# Database URL automatically set as DATABASE_URL secret
# No additional configuration needed

# =============================================================================
# PERSISTENT STORAGE (Optional)
# =============================================================================

# Uncomment if you need persistent disk storage
# [[mounts]]
#   source = "[APP_NAME]_data"
#   destination = "/app/data"
#   initial_size = "1GB"

# Create volume first:
# fly volumes create [APP_NAME]_data --region [PRIMARY_REGION] --size 1

# =============================================================================
# SECRETS CONFIGURATION
# =============================================================================

# Set secrets via CLI (not in this file):
# fly secrets set SECRET_KEY_BASE=$(mix phx.gen.secret)
# fly secrets set DATABASE_URL="ecto://user:pass@host/db"

# List secrets:
# fly secrets list

# =============================================================================
# DISTRIBUTED CLUSTERING (Optional)
# =============================================================================

# For Phoenix LiveView clustering and distributed Erlang
[deploy]
  release_command = "bin/[APP_NAME] eval '[APP_NAME].Release.migrate'"
  strategy = "rolling"

# DNS-based clustering (automatic)
# Nodes discover each other via DNS_CLUSTER_QUERY env var

# =============================================================================
# MONITORING & METRICS
# =============================================================================

[metrics]
  port = 9091
  path = "/metrics"

# Prometheus metrics endpoint (if enabled in Phoenix)
# Add to router.ex:
# forward "/metrics", PhoenixMetrics.Endpoint

# =============================================================================
# LOGGING
# =============================================================================

[logging]
  # Log level: debug, info, warn, error
  level = "info"

# View logs:
# fly logs
# fly logs --follow

# =============================================================================
# CONFIGURATION INSTRUCTIONS
# =============================================================================
#
# 1. Replace placeholders:
#    - [APP_NAME]: Your application name (e.g., "myapp")
#    - [PRIMARY_REGION]: Primary deployment region (e.g., "gru")
#    - [VM_SIZE]: VM size tier (e.g., "shared-cpu-1x")
#    - [MIN_INSTANCES]: Minimum replicas (e.g., 1)
#    - [MAX_INSTANCES]: Maximum replicas (e.g., 4)
#
# 2. Initial deployment:
#    fly launch  # Auto-generates this file
#    fly deploy
#
# 3. Set secrets:
#    fly secrets set SECRET_KEY_BASE=$(mix phx.gen.secret)
#
# 4. Attach database:
#    fly postgres create --name myapp-db --region gru
#    fly postgres attach myapp-db
#
# 5. Custom domain:
#    fly certs add mydomain.com
#    fly ips list  # Add A/AAAA records to DNS
#
# 6. Scale application:
#    fly scale count 2 --region gru
#    fly scale count 2 --region iad
#    fly scale vm dedicated-cpu-1x
#
# 7. Monitor deployment:
#    fly status
#    fly logs --follow
#    fly dashboard
#
# =============================================================================
# RECOMMENDED CONFIGURATIONS BY USE CASE
# =============================================================================
#
# HOBBY / DEVELOPMENT:
# app = "myapp-dev"
# primary_region = "gru"
# size = "shared-cpu-1x"
# min_machines = 0  # Scale to zero when idle
# max_machines = 1
#
# SMALL PRODUCTION (< 10k users):
# app = "myapp-prod"
# primary_region = "gru"
# size = "shared-cpu-2x"
# min_machines = 1
# max_machines = 3
#
# MEDIUM PRODUCTION (10k-100k users):
# app = "myapp-prod"
# primary_region = "gru"
# size = "dedicated-cpu-1x"
# min_machines = 2
# max_machines = 6
# Deploy to 2+ regions
#
# LARGE PRODUCTION (100k+ users):
# app = "myapp-prod"
# primary_region = "gru"
# size = "dedicated-cpu-2x"
# min_machines = 4
# max_machines = 12
# Deploy to 3+ regions
# Use Fly Postgres replicas
#
# =============================================================================
# PRICING ESTIMATES
# =============================================================================
#
# Shared CPU (Hobby Tier):
# - shared-cpu-1x: $0.0000008/sec (~$2/month if running 24/7)
# - Includes 3 shared VMs free on free tier
#
# Dedicated CPU:
# - dedicated-cpu-1x (2GB): $0.0000022/sec (~$5.70/month)
# - dedicated-cpu-2x (4GB): $0.0000044/sec (~$11.40/month)
# - dedicated-cpu-4x (8GB): $0.0000088/sec (~$22.80/month)
#
# Additional costs:
# - Outbound bandwidth: $0.02/GB (first 100GB free per month)
# - Fly Postgres: Separate pricing, starts at $0.01/hour
# - Persistent volumes: $0.15/GB/month
#
# Free tier includes:
# - 3 shared-cpu-1x VMs
# - 3GB persistent volume storage
# - 160GB outbound bandwidth
#
# Calculate your costs: https://fly.io/docs/about/pricing/
#
# =============================================================================
# MULTI-REGION LATENCY OPTIMIZATION
# =============================================================================
#
# Recommended region distribution:
#
# Brazil-focused:
# - primary: gru (São Paulo)
# - secondary: iad (Virginia, USA) - for North American users
# - Cost: ~2x single region
#
# Americas:
# - gru (São Paulo) - South America
# - iad (Virginia) - North America East
# - dfw (Dallas) - North America Central
# - lax (Los Angeles) - North America West
# - Cost: ~4x single region
#
# Global:
# - gru (São Paulo) - South America
# - iad (Virginia) - North America
# - lhr (London) - Europe
# - nrt (Tokyo) - Asia-Pacific
# - syd (Sydney) - Oceania
# - Cost: ~5x single region
#
# Latency targets:
# - Same region: <5ms
# - Same continent: <50ms
# - Intercontinental: <150ms
#
# =============================================================================
# TROUBLESHOOTING
# =============================================================================
#
# Deployment fails:
# - Check logs: fly logs
# - Verify Dockerfile builds locally: docker build .
# - Ensure secrets are set: fly secrets list
#
# Health checks failing:
# - Test endpoint: curl https://myapp.fly.dev/health
# - Check Phoenix listens on 0.0.0.0:8080
# - Verify internal_port matches PORT env var
#
# Slow performance:
# - Check VM size: fly scale show
# - Monitor metrics: fly dashboard
# - Consider upgrading to dedicated CPU
# - Add autoscaling: Increase max_machines
#
# High costs:
# - Check instance count: fly status
# - Review scaling settings
# - Consider shared-cpu for low-traffic apps
# - Enable scale-to-zero for dev/staging
#
# Database connection issues:
# - Verify DATABASE_URL: fly secrets list
# - Check Postgres status: fly postgres db list
# - Test connection: fly ssh console -C "bin/myapp remote"
#
# Clustering not working:
# - Verify DNS_CLUSTER_QUERY is set
# - Check ERL_AFLAGS includes -proto_dist inet6_tcp
# - Test DNS: fly ssh console -C "nslookup myapp.internal"
#
# =============================================================================
# ADVANCED FEATURES
# =============================================================================
#
# Blue-Green Deployments:
# fly deploy --strategy bluegreen
#
# Canary Releases:
# fly deploy --strategy canary
#
# SSH into container:
# fly ssh console
# fly ssh console -C "bin/myapp remote"  # IEx shell
#
# Run migrations:
# fly ssh console -C "bin/myapp eval 'MyApp.Release.migrate()'"
#
# View metrics:
# fly dashboard
# fly metrics
#
# Proxy to local:
# fly proxy 5432 -a myapp-db  # Postgres
# fly proxy 8080              # Application
#
# =============================================================================
# INTEGRATION WITH CLAUDE CODE
# =============================================================================
#
# Deploy from Claude Code:
# 1. Ensure flyctl installed: curl -L https://fly.io/install.sh | sh
# 2. Login: fly auth login
# 3. Deploy: fly deploy
#
# MCP Server integration:
# Add to Claude Code config:
# {
#   "mcpServers": {
#     "fly": {
#       "command": "flyctl",
#       "args": ["mcp"]
#     }
#   }
# }
#
# =============================================================================
# RESOURCES
# =============================================================================
#
# Official Documentation:
# - Fly.io Docs: https://fly.io/docs/
# - Phoenix on Fly: https://fly.io/docs/elixir/
# - Fly Launch Guide: https://fly.io/docs/apps/launch/
#
# Community:
# - Fly.io Community: https://community.fly.io/
# - Elixir Forum: https://elixirforum.com/
#
# Monitoring:
# - Fly Dashboard: https://fly.io/dashboard
# - Grafana Integration: https://fly.io/docs/metrics-and-logs/metrics/
#
# =============================================================================
