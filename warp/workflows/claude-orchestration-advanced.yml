# Workflow avançado de orquestração Claude CLI
# Baseado no notebook "Orquestração de Múltiplos Terminais com Claude CLI"
# Data: 2025-09-18
# Ambiente: WSL2 Ubuntu 24.04 + Zsh + Claude Code v1.0.113

name: "Claude Advanced Orchestration"
description: "Orquestração avançada com monitoramento em tempo real baseada no contexto de múltiplos terminais"
command: |
  echo "🎭 Claude Advanced Orchestration - Iniciando..."
  echo "============================================="
  
  # Configurações
  PROJECT_NAME="${PROJECT_NAME:-claude-orchestrated-project}"
  WORKSPACE_DIR="$(pwd)/$PROJECT_NAME"
  LOG_DIR="$WORKSPACE_DIR/logs"
  
  # Cores para output (baseado no contexto fornecido)
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  BLUE='\033[0;34m'
  YELLOW='\033[1;33m'
  CYAN='\033[0;36m'
  NC='\033[0m' # No Color
  
  # Função para log com timestamp (do contexto)
  log() {
      echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1"
  }
  
  # Função para executar comando com Claude CLI em background
  execute_claude_task() {
      local terminal_id=$1
      local terminal_name=$2
      local prompt=$3
      local output_file=$4
      
      log "${YELLOW}🤖 Terminal $terminal_id ($terminal_name):${NC} Executando com Claude CLI..."
      
      mkdir -p "$LOG_DIR/terminal_$terminal_id"
      
      # Executar Claude CLI (baseado no contexto fornecido)
      if claude -p "$prompt" > "$output_file" 2> "$LOG_DIR/terminal_$terminal_id/error.log"; then
          log "${GREEN}✅${NC} Terminal $terminal_id: $terminal_name concluído → $output_file"
      else
          log "${RED}❌${NC} Terminal $terminal_id: Erro no $terminal_name (ver logs/terminal_$terminal_id/error.log)"
          return 1
      fi
  }
  
  # Setup inicial
  log "${GREEN}🚀 Iniciando Orquestração Claude CLI${NC}"
  log "${CYAN}Projeto: $PROJECT_NAME${NC}"
  log "${CYAN}Workspace: $WORKSPACE_DIR${NC}"
  
  # Criar estrutura do projeto
  mkdir -p "$WORKSPACE_DIR"/{src,docs,tests,build,logs}
  cd "$WORKSPACE_DIR" || exit 1
  
  log "${YELLOW}═══ FASE 1: Desenvolvimento Paralelo ═══${NC}"
  
  # Terminal 1: Frontend (HTML Dashboard) - Baseado no contexto
  execute_claude_task 1 "Frontend" \
      "Create a complete HTML dashboard for project management with:
  - Modern responsive design with CSS Grid/Flexbox
  - Dark theme optimized for terminals
  - Status cards showing project metrics
  - Task list with interactive checkboxes
  - Progress bars and charts
  - Footer with real-time timestamp
  - All CSS and JavaScript inline for single-file deployment
  - Terminal-friendly color scheme (dark background, bright text)
  - Mobile responsive design" \
      "$WORKSPACE_DIR/src/index.html" &
  PID1=$!
  
  # Terminal 2: Backend (Node.js API) - Baseado no contexto
  execute_claude_task 2 "Backend" \
      "Create a Node.js API server with:
  - Express.js framework setup
  - RESTful API endpoints for project management
  - CRUD operations for tasks and projects
  - JSON file-based storage (no database required)
  - CORS enabled for frontend integration
  - Error handling middleware
  - Logging functionality
  - Environment variable support
  - Port configuration (default 3000)
  - Health check endpoint
  - Documentation comments" \
      "$WORKSPACE_DIR/src/server.js" &
  PID2=$!
  
  # Terminal 3: Documentation (Comprehensive README)
  execute_claude_task 3 "Documentation" \
      "Create comprehensive project documentation with:
  - Project overview and objectives
  - Quick start guide
  - Installation instructions for Ubuntu/WSL2
  - API reference with example requests
  - Frontend usage guide
  - Configuration options
  - Troubleshooting section
  - Development workflow
  - Contributing guidelines
  - License information
  - Deployment instructions
  - Performance optimization tips" \
      "$WORKSPACE_DIR/docs/README.md" &
  PID3=$!
  
  # Terminal 4: Testing (Test Suite)
  execute_claude_task 4 "Testing" \
      "Create comprehensive test suite with:
  - Unit tests for API endpoints
  - Frontend functionality tests
  - Integration test examples
  - Mock data and fixtures
  - Test utilities and helpers
  - Performance tests
  - Error handling tests
  - Configuration for Jest or similar
  - Test scripts for package.json
  - CI/CD test pipeline example
  - Coverage reporting setup" \
      "$WORKSPACE_DIR/tests/test-suite.js" &
  PID4=$!
  
  # Terminal 5: DevOps (Docker + Configuration)
  execute_claude_task 5 "DevOps" \
      "Create complete DevOps configuration with:
  - Multi-stage Dockerfile for Node.js application
  - docker-compose.yml for development environment
  - Production-ready docker-compose.prod.yml
  - .dockerignore file with appropriate exclusions
  - Package.json with all necessary scripts
  - Environment configuration (.env.example)
  - PM2 ecosystem file for process management
  - Nginx configuration for reverse proxy
  - Health check scripts
  - Backup and restore procedures
  - Monitoring setup recommendations" \
      "$WORKSPACE_DIR/build/Dockerfile" &
  PID5=$!
  
  # Aguardar conclusão de todas as tarefas paralelas
  log "${CYAN}⏳ Aguardando conclusão de todos os terminais...${NC}"
  wait $PID1 $PID2 $PID3 $PID4 $PID5
  
  log "${YELLOW}═══ FASE 2: Integração e Validação ═══${NC}"
  
  # Verificar arquivos gerados
  log "${CYAN}📁 Arquivos gerados:${NC}"
  if ls -la "$WORKSPACE_DIR"/{src,docs,tests,build}/*.*  2>/dev/null; then
      log "${GREEN}✅ Todos os arquivos foram gerados com sucesso${NC}"
  else
      log "${RED}⚠️ Alguns arquivos podem não ter sido gerados${NC}"
  fi
  
  # Gerar relatório final
  log "${YELLOW}📋 Gerando relatório de orquestração...${NC}"
  
  cat > "$WORKSPACE_DIR/logs/orchestration-report.md" << EOF
  # Relatório de Orquestração Claude CLI
  
  **Data de execução:** $(date '+%Y-%m-%d %H:%M:%S')  
  **Projeto:** $PROJECT_NAME  
  **Workspace:** $WORKSPACE_DIR  
  
  ## 📊 Resumo da Execução
  
  ### Terminais Orquestrados
  - **Terminal 1:** Frontend (HTML Dashboard)
  - **Terminal 2:** Backend (Node.js API Server) 
  - **Terminal 3:** Documentation (README completo)
  - **Terminal 4:** Testing (Test Suite completo)
  - **Terminal 5:** DevOps (Docker + Config)
  
  ### 📁 Arquivos Gerados
  
  $(ls -la "$WORKSPACE_DIR"/{src,docs,tests,build}/*.* 2>/dev/null | awk '{print "- **" $9 "** (" $5 " bytes) - " $6 " " $7 " " $8}')
  
  ### 🚀 Próximos Passos
  
  1. **Testar aplicação:**
     \`\`\`bash
     cd $WORKSPACE_DIR/src
     node server.js
     \`\`\`
  
  2. **Visualizar dashboard:**
     \`\`\`bash
     cd $WORKSPACE_DIR/src
     python3 -m http.server 8080
     # Acessar: http://localhost:8080
     \`\`\`
  
  3. **Executar testes:**
     \`\`\`bash
     cd $WORKSPACE_DIR
     npm test
     \`\`\`
  
  4. **Deploy com Docker:**
     \`\`\`bash
     cd $WORKSPACE_DIR
     docker-compose up -d
     \`\`\`
  
  ---
  **Gerado automaticamente pelo Workflow Claude Advanced Orchestration**
  EOF
  
  log "${GREEN}🎉 Orquestração Concluída com Sucesso!${NC}"
  log "${CYAN}📊 Relatório disponível em: $WORKSPACE_DIR/logs/orchestration-report.md${NC}"
  
  echo ""
  echo "🚀 Comandos úteis:"
  echo "  cd $WORKSPACE_DIR"
  echo "  cat logs/orchestration-report.md"
  echo "  cd src && python3 -m http.server 8000"
  
arguments:
  - name: "PROJECT_NAME"
    description: "Nome do projeto para orquestração"
    default_value: "claude-orchestrated-project"

tags: ["claude", "orchestration", "ai", "development", "parallel", "automation"]