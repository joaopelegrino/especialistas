# Workflow de diagnóstico específico para Warp Terminal
# Baseado na documentação oficial e ambiente atual
# Data: 2025-09-18

name: "Warp Terminal Diagnostic"
description: "Diagnóstico completo e específico do Warp Terminal e integrações"
command: |
  echo "🔍 WARP TERMINAL - DIAGNÓSTICO COMPLETO"
  echo "======================================="
  echo ""
  
  # Cores para output
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  BLUE='\033[0;34m'
  YELLOW='\033[1;33m'
  CYAN='\033[0;36m'
  BOLD='\033[1m'
  NC='\033[0m'
  
  # Função para status com emoji
  status_check() {
    if [ $1 -eq 0 ]; then
      echo -e "${GREEN}✅ $2${NC}"
    else
      echo -e "${RED}❌ $2${NC}"
    fi
  }
  
  # Função para info com emoji
  info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
  }
  
  # Função para warning com emoji
  warn() {
    echo -e "${YELLOW}⚠️  $1${NC}"
  }
  
  # === SEÇÃO 1: DETECÇÃO WARP TERMINAL ===
  echo -e "${CYAN}${BOLD}1. 🚀 DETECÇÃO WARP TERMINAL${NC}"
  echo "─────────────────────────────"
  
  # Verificar se estamos no Warp
  if [[ "${TERM_PROGRAM:-}" == "WarpTerminal" ]]; then
    status_check 0 "Warp Terminal detectado corretamente"
    echo "   Terminal: $TERM_PROGRAM"
  else
    status_check 1 "Warp Terminal não detectado"
    warn "TERM_PROGRAM atual: ${TERM_PROGRAM:-'não definido'}"
  fi
  
  # Verificar variáveis de ambiente Warp
  echo ""
  echo "🔧 Variáveis de Ambiente Warp:"
  warp_vars=("TERM_PROGRAM" "WARP_HONOR_PS1" "WARP_USE_SSH_WRAPPER" "WARP_SHELL_DEBUG_MODE" "WARP_IS_LOCAL_SHELL_SESSION")
  
  for var in "${warp_vars[@]}"; do
    value="${!var:-'não definido'}"
    if [[ "$value" != "não definido" ]]; then
      echo -e "   ${GREEN}✓${NC} $var = $value"
    else
      echo -e "   ${YELLOW}○${NC} $var = $value"
    fi
  done
  
  # === SEÇÃO 2: CONFIGURAÇÃO WARP ===
  echo ""
  echo -e "${CYAN}${BOLD}2. ⚙️ CONFIGURAÇÃO WARP${NC}"
  echo "─────────────────────────"
  
  # Verificar diretório .warp
  if [[ -d "$HOME/.warp" ]]; then
    status_check 0 "Diretório ~/.warp existe"
    
    # Listar conteúdo
    echo ""
    echo "📁 Estrutura ~/.warp:"
    if command -v tree &> /dev/null; then
      tree -L 2 "$HOME/.warp" 2>/dev/null || ls -la "$HOME/.warp"
    else
      ls -la "$HOME/.warp"
    fi
    
    # Verificar arquivos específicos
    echo ""
    echo "📄 Arquivos de Configuração:"
    config_files=("config.json" "workflows" "notebooks")
    for file in "${config_files[@]}"; do
      if [[ -e "$HOME/.warp/$file" ]]; then
        if [[ -d "$HOME/.warp/$file" ]]; then
          count=$(find "$HOME/.warp/$file" -type f 2>/dev/null | wc -l)
          echo -e "   ${GREEN}✓${NC} $file/ ($count arquivos)"
        else
          size=$(stat -f%z "$HOME/.warp/$file" 2>/dev/null || stat -c%s "$HOME/.warp/$file" 2>/dev/null || echo "?")
          echo -e "   ${GREEN}✓${NC} $file (${size} bytes)"
        fi
      else
        echo -e "   ${RED}✗${NC} $file (não encontrado)"
      fi
    done
    
  else
    status_check 1 "Diretório ~/.warp não existe"
    warn "Execute o setup: ~/workspace/especialistas/warp/scripts/setup-integration.sh"
  fi
  
  # === SEÇÃO 3: WORKFLOWS WARP ===
  echo ""
  echo -e "${CYAN}${BOLD}3. 🎭 WORKFLOWS WARP${NC}"
  echo "─────────────────────────"
  
  workflows_dir="$HOME/.warp/workflows"
  if [[ -d "$workflows_dir" ]]; then
    workflow_count=$(find "$workflows_dir" -name "*.yml" -type f 2>/dev/null | wc -l)
    status_check 0 "Diretório de workflows encontrado"
    info "$workflow_count workflows disponíveis"
    
    if [[ $workflow_count -gt 0 ]]; then
      echo ""
      echo "📋 Workflows Encontrados:"
      find "$workflows_dir" -name "*.yml" -type f 2>/dev/null | while read -r workflow; do
        filename=$(basename "$workflow")
        # Tentar extrair nome do workflow
        if command -v grep &> /dev/null && command -v head &> /dev/null; then
          name=$(grep "^name:" "$workflow" 2>/dev/null | head -1 | cut -d'"' -f2 2>/dev/null || echo "")
          if [[ -n "$name" ]]; then
            echo -e "   ${GREEN}▶${NC} $filename → \"$name\""
          else
            echo -e "   ${GREEN}▶${NC} $filename"
          fi
        else
          echo -e "   ${GREEN}▶${NC} $filename"
        fi
      done
    fi
  else
    status_check 1 "Diretório de workflows não encontrado"
    warn "Workflows não configurados"
  fi
  
  # Verificar workflows do nosso sistema
  our_workflows_dir="/home/notebook/workspace/especialistas/warp/workflows"
  if [[ -d "$our_workflows_dir" ]]; then
    our_count=$(find "$our_workflows_dir" -name "*.yml" -type f 2>/dev/null | wc -l)
    echo ""
    info "Sistema de workflows especialistas: $our_count workflows disponíveis"
  fi
  
  # === SEÇÃO 4: INTEGRAÇÃO CLAUDE CODE ===
  echo ""
  echo -e "${CYAN}${BOLD}4. 🤖 INTEGRAÇÃO CLAUDE CODE${NC}"
  echo "──────────────────────────────"
  
  if command -v claude &> /dev/null; then
    status_check 0 "Claude CLI encontrado"
    
    # Versão Claude
    claude_version=$(claude --version 2>/dev/null | head -1 || echo "Versão não disponível")
    info "Versão: $claude_version"
    
    # Teste básico Claude
    echo ""
    echo "🧪 Teste Básico Claude CLI:"
    echo "Executando: claude -p \"Echo test: Hello from Warp diagnostic\""
    
    claude_test=$(claude -p "Echo test: Hello from Warp diagnostic" 2>/dev/null | head -1)
    if [[ -n "$claude_test" ]]; then
      status_check 0 "Claude CLI funcionando"
      echo "   Resposta: $claude_test"
    else
      status_check 1 "Claude CLI com problemas"
      warn "Execute: claude doctor"
    fi
    
  else
    status_check 1 "Claude CLI não encontrado"
    warn "Instale Claude Code v1.0.113+"
  fi
  
  # === SEÇÃO 5: SHELL E TERMINAL ===
  echo ""
  echo -e "${CYAN}${BOLD}5. 🐚 SHELL E TERMINAL${NC}"
  echo "─────────────────────────"
  
  # Informações do shell
  echo "Shell Atual: $SHELL"
  if [[ "$SHELL" == */zsh ]]; then
    status_check 0 "Zsh detectado"
    info "Versão Zsh: ${ZSH_VERSION:-'não disponível'}"
  else
    status_check 1 "Zsh não é o shell padrão"
  fi
  
  # Verificar Oh My Zsh
  if [[ -d "$HOME/.oh-my-zsh" ]]; then
    status_check 0 "Oh My Zsh instalado"
  else
    status_check 1 "Oh My Zsh não encontrado"
  fi
  
  # Terminal info
  echo ""
  echo "🖥️ Informações do Terminal:"
  echo "   TERM: ${TERM:-'não definido'}"
  echo "   COLORTERM: ${COLORTERM:-'não definido'}"
  echo "   Cores: $(tput colors 2>/dev/null || echo 'não disponível')"
  
  # === SEÇÃO 6: SISTEMA OPERACIONAL ===
  echo ""
  echo -e "${CYAN}${BOLD}6. 💻 SISTEMA OPERACIONAL${NC}"
  echo "──────────────────────────"
  
  # OS Info
  if command -v lsb_release &> /dev/null; then
    os_info=$(lsb_release -d 2>/dev/null | cut -f2)
    echo "OS: $os_info"
  else
    echo "OS: $(uname -s) $(uname -r)"
  fi
  
  # WSL Detection
  if grep -qi microsoft /proc/version 2>/dev/null; then
    status_check 0 "WSL2 detectado"
    wsl_info=$(cat /proc/version | grep -oP 'microsoft.*' || echo "WSL")
    info "Ambiente: $wsl_info"
  else
    info "Sistema: Linux nativo"
  fi
  
  # === SEÇÃO 7: FERRAMENTAS DE DESENVOLVIMENTO ===
  echo ""
  echo -e "${CYAN}${BOLD}7. 🛠️ FERRAMENTAS DE DESENVOLVIMENTO${NC}"
  echo "────────────────────────────────────────"
  
  # Lista de ferramentas para verificar
  tools=("git" "node" "npm" "python3" "docker" "vim" "code" "yazi")
  
  echo "Ferramentas Instaladas:"
  for tool in "${tools[@]}"; do
    if command -v "$tool" &> /dev/null; then
      version=$($tool --version 2>/dev/null | head -1 | cut -d' ' -f1-3 2>/dev/null || echo "instalado")
      echo -e "   ${GREEN}✓${NC} $tool: $version"
    else
      echo -e "   ${RED}✗${NC} $tool: não instalado"
    fi
  done
  
  # === SEÇÃO 8: PERFORMANCE E RECURSOS ===
  echo ""
  echo -e "${CYAN}${BOLD}8. 📊 PERFORMANCE E RECURSOS${NC}"
  echo "─────────────────────────────"
  
  # Recursos do sistema
  echo "Sistema:"
  echo "   CPU: $(nproc) cores"
  if command -v free &> /dev/null; then
    echo "   RAM: $(free -h | awk '/^Mem:/ {print $2}') total, $(free -h | awk '/^Mem:/ {print $7}') disponível"
  fi
  echo "   Disk: $(df -h / | awk 'NR==2 {print $4}') disponível"
  
  # Performance do shell
  echo ""
  echo "🚄 Performance:"
  start_time=$(date +%s%N)
  source /dev/null 2>/dev/null
  end_time=$(date +%s%N)
  duration=$(( (end_time - start_time) / 1000000 ))
  echo "   Shell startup: ~${duration}ms"
  
  # === SEÇÃO 9: INTEGRAÇÃO SISTEMA ESPECIALISTA ===
  echo ""
  echo -e "${CYAN}${BOLD}9. 🎓 SISTEMA ESPECIALISTA WARP${NC}"
  echo "─────────────────────────────────────"
  
  specialist_dir="/home/notebook/workspace/especialistas/warp"
  if [[ -d "$specialist_dir" ]]; then
    status_check 0 "Sistema especialista encontrado"
    
    # Contar arquivos
    md_count=$(find "$specialist_dir" -name "*.md" -type f 2>/dev/null | wc -l)
    sh_count=$(find "$specialist_dir" -name "*.sh" -type f 2>/dev/null | wc -l)
    yml_count=$(find "$specialist_dir" -name "*.yml" -type f 2>/dev/null | wc -l)
    
    info "Documentação: $md_count arquivos Markdown"
    info "Scripts: $sh_count scripts executáveis"
    info "Workflows: $yml_count workflows YAML"
    
    # Verificar arquivos principais
    echo ""
    echo "📚 Documentação Principal:"
    main_docs=("README.md" "docs/INDEX.md" "guides/quick-reference.md")
    for doc in "${main_docs[@]}"; do
      if [[ -f "$specialist_dir/$doc" ]]; then
        lines=$(wc -l < "$specialist_dir/$doc" 2>/dev/null || echo "?")
        echo -e "   ${GREEN}✓${NC} $doc ($lines linhas)"
      else
        echo -e "   ${RED}✗${NC} $doc (não encontrado)"
      fi
    done
    
    # Verificar scripts
    echo ""
    echo "🔧 Scripts Principais:"
    main_scripts=("scripts/setup-integration.sh" "examples/orchestration-script.sh")
    for script in "${main_scripts[@]}"; do
      if [[ -f "$specialist_dir/$script" ]]; then
        if [[ -x "$specialist_dir/$script" ]]; then
          echo -e "   ${GREEN}✓${NC} $script (executável)"
        else
          echo -e "   ${YELLOW}○${NC} $script (não executável)"
        fi
      else
        echo -e "   ${RED}✗${NC} $script (não encontrado)"
      fi
    done
    
  else
    status_check 1 "Sistema especialista não encontrado"
    warn "Clone o sistema: git clone [repo] $specialist_dir"
  fi
  
  # === SEÇÃO 10: RECOMENDAÇÕES ===
  echo ""
  echo -e "${CYAN}${BOLD}10. 💡 RECOMENDAÇÕES${NC}"
  echo "─────────────────────"
  
  recommendations=0
  
  # Verificar se precisa executar setup
  if [[ ! -d "$HOME/.warp" ]] || [[ ! -f "$HOME/config/warp-integration.zsh" ]]; then
    echo -e "${YELLOW}📋${NC} Execute o setup de integração:"
    echo "   cd /home/notebook/workspace/especialistas/warp"
    echo "   ./scripts/setup-integration.sh"
    recommendations=$((recommendations + 1))
  fi
  
  # Verificar se Claude está funcionando
  if ! command -v claude &> /dev/null; then
    echo -e "${YELLOW}📋${NC} Instale ou configure Claude Code:"
    echo "   claude doctor"
    recommendations=$((recommendations + 1))
  fi
  
  # Verificar se está no Warp
  if [[ "${TERM_PROGRAM:-}" != "WarpTerminal" ]]; then
    echo -e "${YELLOW}📋${NC} Execute este diagnóstico no Warp Terminal para melhor detecção"
    recommendations=$((recommendations + 1))
  fi
  
  if [[ $recommendations -eq 0 ]]; then
    echo -e "${GREEN}🎉${NC} Sistema está bem configurado! Nenhuma recomendação."
  fi
  
  # === RESUMO FINAL ===
  echo ""
  echo -e "${CYAN}${BOLD}═══════════════════════════════════════${NC}"
  echo -e "${CYAN}${BOLD}📊 RESUMO DO DIAGNÓSTICO${NC}"
  echo -e "${CYAN}${BOLD}═══════════════════════════════════════${NC}"
  
  echo ""
  if [[ "${TERM_PROGRAM:-}" == "WarpTerminal" ]] && command -v claude &> /dev/null && [[ -d "$HOME/.warp" ]]; then
    echo -e "${GREEN}${BOLD}✅ STATUS GERAL: EXCELENTE${NC}"
    echo -e "   Warp Terminal + Claude CLI + Configuração completa"
  elif [[ "${TERM_PROGRAM:-}" == "WarpTerminal" ]] && command -v claude &> /dev/null; then
    echo -e "${YELLOW}${BOLD}⚠️  STATUS GERAL: BOM${NC}"
    echo -e "   Warp + Claude funcionando, configuração básica"
  else
    echo -e "${RED}${BOLD}❌ STATUS GERAL: REQUER ATENÇÃO${NC}"
    echo -e "   Verificar instalação do Warp Terminal e Claude Code"
  fi
  
  echo ""
  echo -e "${BLUE}💡 Para mais informações:${NC}"
  echo "   cat /home/notebook/workspace/especialistas/warp/README.md"
  echo "   cat /home/notebook/workspace/especialistas/warp/guides/quick-reference.md"
  
  echo ""
  echo -e "${CYAN}🔄 Diagnóstico concluído em $(date '+%Y-%m-%d %H:%M:%S')${NC}"

tags: ["diagnostic", "warp", "system", "debug", "health-check"]