# Workflow: An√°lise de C√≥digo com Tree Otimizado
# Baseado no Sistema Especialista em Comandos Tree
# Data: 2025-09-18
# Ambiente: WSL2 Ubuntu 24.04 + Zsh + Claude Code v1.0.113

name: "Code Tree Analyzer"
description: "Analisa c√≥digo da pasta atual e gera comandos tree otimizados usando Claude CLI como especialista"
command: |
  echo "üîç ANALISADOR DE C√ìDIGO - TREE ESPECIALISTA"
  echo "==========================================="
  echo ""
  
  # Cores para output
  BLUE='\033[0;34m'
  GREEN='\033[0;32m'
  YELLOW='\033[1;33m'
  CYAN='\033[0;36m'
  NC='\033[0m'
  
  # Fun√ß√£o para log
  log() {
      echo -e "${BLUE}[$(date '+%H:%M:%S')]${NC} $1"
  }
  
  # Detectar pasta atual
  CURRENT_DIR="${ANALYSIS_PATH:-$(pwd)}"
  log "Analisando diret√≥rio: ${YELLOW}$CURRENT_DIR${NC}"
  
  # Fazer scan b√°sico da estrutura
  log "Fazendo scan inicial da estrutura..."
  
  # Detectar tipo de projeto
  PROJECT_TYPES=""
  if [[ -f "$CURRENT_DIR/package.json" ]]; then
    PROJECT_TYPES="${PROJECT_TYPES}JavaScript/Node.js "
  fi
  if [[ -f "$CURRENT_DIR/requirements.txt" ]] || [[ -f "$CURRENT_DIR/setup.py" ]] || [[ -f "$CURRENT_DIR/pyproject.toml" ]]; then
    PROJECT_TYPES="${PROJECT_TYPES}Python "
  fi
  if [[ -f "$CURRENT_DIR/Cargo.toml" ]]; then
    PROJECT_TYPES="${PROJECT_TYPES}Rust "
  fi
  if [[ -f "$CURRENT_DIR/go.mod" ]]; then
    PROJECT_TYPES="${PROJECT_TYPES}Go "
  fi
  if [[ -f "$CURRENT_DIR/Dockerfile" ]]; then
    PROJECT_TYPES="${PROJECT_TYPES}Docker "
  fi
  if [[ -d "$CURRENT_DIR/.git" ]]; then
    PROJECT_TYPES="${PROJECT_TYPES}Git "
  fi
  
  # Contar arquivos e diret√≥rios
  TOTAL_FILES=$(find "$CURRENT_DIR" -type f 2>/dev/null | wc -l)
  TOTAL_DIRS=$(find "$CURRENT_DIR" -type d 2>/dev/null | wc -l)
  
  # Detectar profundidade da estrutura
  MAX_DEPTH=$(find "$CURRENT_DIR" -type d 2>/dev/null | awk -F/ '{print NF}' | sort -n | tail -1)
  RELATIVE_DEPTH=$((MAX_DEPTH - $(echo "$CURRENT_DIR" | awk -F/ '{print NF}') + 1))
  
  log "Projeto detectado: ${GREEN}${PROJECT_TYPES:-'Gen√©rico'}${NC}"
  log "Arquivos: $TOTAL_FILES | Diret√≥rios: $TOTAL_DIRS | Profundidade m√°xima: $RELATIVE_DEPTH"
  
  echo ""
  log "${CYAN}ü§ñ Consultando Claude CLI - Sistema Especialista em Tree...${NC}"
  echo ""
  
  # === CHAMADA √öNICA DO CLAUDE CLI ===
  # Prompt completo baseado no Sistema Especialista fornecido
  claude -p "Voc√™ √© um especialista em gerar comandos \`tree\` otimizados para visualiza√ß√£o limpa e eficiente de estruturas de diret√≥rios.

## CONTEXTO FORNECIDO:
- **Caminho da pasta**: $CURRENT_DIR
- **Tipos de projeto detectados**: ${PROJECT_TYPES:-'Gen√©rico/Misto'}
- **Estat√≠sticas**: $TOTAL_FILES arquivos, $TOTAL_DIRS diret√≥rios, profundidade m√°xima $RELATIVE_DEPTH n√≠veis
- **Arquivos encontrados na raiz**: $(ls -la "$CURRENT_DIR" 2>/dev/null | head -10 | tail -n +2 | awk '{print $9}' | tr '\n' ', ' | sed 's/,$//')

## INSTRU√á√ïES ESPEC√çFICAS:
1. Gere comandos \`tree\` otimizados para este projeto
2. Foque em **visualiza√ß√£o limpa** removendo ru√≠do desnecess√°rio
3. Considere os tipos de projeto detectados para filtros espec√≠ficos
4. Proporcione 3 alternativas: vis√£o geral, estrutura detalhada, e apenas diret√≥rios
5. Explique cada comando gerado

## DIRETRIZES OBRIGAT√ìRIAS:
- Use filtros \`-I 'pattern'\` para excluir elementos desnecess√°rios
- Limite profundidade com \`-L n\` quando apropriado
- Use \`--dirsfirst\` para melhor legibilidade
- Considere \`--prune\` para remover diret√≥rios vazios
- Adapte filtros baseado nos tipos de projeto detectados

## FORMATO DE RESPOSTA OBRIGAT√ìRIO:
\`\`\`markdown
## üéØ COMANDO PRINCIPAL RECOMENDADO
\`[comando tree otimizado]\`

## ‚öôÔ∏è EXPLICA√á√ÉO DAS OP√á√ïES
- \`-L n\`: [explica√ß√£o]
- \`-I 'pattern'\`: [explica√ß√£o dos padr√µes exclu√≠dos]
- [outras op√ß√µes]: [justificativas]

## üîÑ ALTERNATIVAS SUGERIDAS

### 1. Vis√£o Geral Limpa
\`[comando para vis√£o macro]\`

### 2. Estrutura Detalhada  
\`[comando para an√°lise profunda]\`

### 3. Apenas Diret√≥rios
\`[comando s√≥ com estrutura de pastas]\`

## üìù PADR√ïES EXCLU√çDOS E JUSTIFICATIVAS
- \`pattern1\`: [motivo da exclus√£o]
- \`pattern2\`: [motivo da exclus√£o]

## üí° RECOMENDA√á√ÉO ESPEC√çFICA
[Recomenda√ß√£o personalizada baseada no contexto detectado]
\`\`\`

Gere a an√°lise completa agora." > analysis_result.md
  
  # Verificar se a an√°lise foi bem-sucedida
  if [[ -f "analysis_result.md" ]] && [[ -s "analysis_result.md" ]]; then
    log "${GREEN}‚úÖ An√°lise conclu√≠da com sucesso!${NC}"
    echo ""
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "üìä RESULTADO DA AN√ÅLISE ESPECIALISTA"
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo ""
    
    # Exibir resultado
    cat analysis_result.md
    
    echo ""
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo ""
    
    # Tentar extrair e executar o comando principal
    log "${CYAN}üöÄ Executando comando tree principal recomendado...${NC}"
    echo ""
    
    # Extrair primeiro comando tree da an√°lise
    MAIN_COMMAND=$(grep -A 1 "COMANDO PRINCIPAL RECOMENDADO" analysis_result.md | grep "^\`tree" | sed 's/^`//' | sed 's/`$//' | head -1)
    
    if [[ -n "$MAIN_COMMAND" ]]; then
      log "Executando: ${YELLOW}$MAIN_COMMAND${NC}"
      echo ""
      
      # Substituir [path] ou similar pelo diret√≥rio atual se necess√°rio
      FINAL_COMMAND=$(echo "$MAIN_COMMAND" | sed "s|\[path\]|$CURRENT_DIR|g" | sed "s|\[PATH\]|$CURRENT_DIR|g")
      
      # Executar o comando
      if eval "$FINAL_COMMAND"; then
        log "${GREEN}‚úÖ Comando executado com sucesso!${NC}"
      else
        log "${YELLOW}‚ö†Ô∏è Comando n√£o p√¥de ser executado (possivelmente tree n√£o instalado)${NC}"
        log "Comando que seria executado: $FINAL_COMMAND"
      fi
    else
      log "${YELLOW}‚ö†Ô∏è N√£o foi poss√≠vel extrair comando tree da an√°lise${NC}"
    fi
    
  else
    log "${RED}‚ùå Erro na an√°lise. Verificando Claude CLI...${NC}"
    
    # Teste b√°sico Claude
    if claude --version > /dev/null 2>&1; then
      log "${YELLOW}Claude CLI est√° instalado, mas houve erro na an√°lise${NC}"
    else
      log "${RED}Claude CLI n√£o est√° dispon√≠vel ou configurado${NC}"
      log "Execute: claude doctor"
    fi
  fi
  
  echo ""
  log "${CYAN}üìÅ Arquivos gerados:${NC}"
  ls -la analysis_result.md 2>/dev/null || echo "Nenhum arquivo gerado"
  
  echo ""
  log "${GREEN}üéØ An√°lise finalizada!${NC}"
  log "Arquivo de an√°lise: ${YELLOW}analysis_result.md${NC}"
  
  if [[ "${SHOW_BASIC_TREE:-}" == "true" ]]; then
    echo ""
    log "${CYAN}üìä Tree b√°sico para compara√ß√£o:${NC}"
    tree -L 2 "$CURRENT_DIR" 2>/dev/null || ls -la "$CURRENT_DIR"
  fi

arguments:
  - name: "ANALYSIS_PATH"
    description: "Caminho para an√°lise (padr√£o: diret√≥rio atual)"
    default_value: ""
  - name: "SHOW_BASIC_TREE"
    description: "Mostrar tree b√°sico para compara√ß√£o (true/false)"
    default_value: "false"

tags: ["analysis", "code", "tree", "claude", "specialist", "optimization"]