# Healthcare WASM-Elixir Stack - Complete LLM Context
# Last Updated: 2025-09-30
# Purpose: Consolidated knowledge base context for LLM optimization

---

## I. SYSTEM OVERVIEW

**Project**: Healthcare Content Management System (CMS)
**Architecture**: Elixir Host + WebAssembly Plugins
**Stack Score**: 99.5/100
**Domain**: Healthcare (Brazilian + International compliance)
**Complexity**: Enterprise-grade (Level 5)

### Key Characteristics
- **Production-ready**: Enterprise-proven stack components
- **Security-first**: Zero Trust + Post-Quantum Cryptography native
- **Healthcare-compliant**: LGPD, HIPAA, CFM, ANVISA integrated
- **AI-enabled**: Model Context Protocol (MCP) integration
- **Real-time**: Phoenix LiveView for live dashboards
- **Fault-tolerant**: Erlang/OTP supervision trees

---

## II. TECHNOLOGY STACK (VALIDATED VERSIONS)

### Runtime Environment
- **Elixir**: 1.17.3 (functional, concurrent, fault-tolerant)
- **Erlang/OTP**: 27.1 (BEAM VM, actor model)
- **Phoenix Framework**: 1.8.0 (web framework)
- **Phoenix LiveView**: 1.0.1 (real-time UI)

### WebAssembly Ecosystem
- **Extism SDK**: 1.5.4 (universal plugin system)
- **Wasmtime Runtime**: 25.0.3 (secure WASM execution)
- **WASM Specification**: 2.0
- **Component Model**: 0.5.0 (cross-language interop)

### Security & Cryptography
- **CRYSTALS-Kyber**: NIST FIPS 203 (key encapsulation)
- **CRYSTALS-Dilithium**: NIST FIPS 204 (digital signatures)
- **SPHINCS+**: NIST FIPS 205 (hash-based signatures)
- **Zero Trust Spec**: NIST SP 800-207

### Database & Storage
- **PostgreSQL**: 16.6 (relational database)
- **TimescaleDB**: 2.17.2 (time-series extension)
- **pgvector**: 0.8.0 (vector embeddings for AI)
- **PostGIS**: 3.5.0 (geospatial data)

### Infrastructure & DevOps
- **Kubernetes**: 1.31 (container orchestration)
- **Istio**: 1.24 (service mesh)
- **Prometheus**: 2.55 (metrics monitoring)
- **Grafana**: 11.3 (visualization)
- **OpenTelemetry**: 1.32 (distributed tracing)

---

## III. HEALTHCARE COMPLIANCE STANDARDS

### Brazilian Regulations (PRIMARY)

**LGPD (Lei 13.709/2018)** - General Data Protection Law
- Art. 11: Sensitive personal data processing
- Art. 8: Explicit consent requirements
- Art. 16: Data retention limits (5 years)
- Data minimization, purpose limitation, transparency

**CFM Resolução 1.821/2007** - Electronic Medical Records
- Digital signature requirements
- Data integrity guarantees
- Backup and disaster recovery
- Medical professional authentication

**CFM Resolução 2.314/2022** - Telemedicine
- Secure platform requirements
- Patient authentication mechanisms
- End-to-end encryption
- Informed consent for remote care

**ANVISA RDC 302/2005** - Clinical Laboratories
- Laboratory data quality controls
- Result validation workflows
- Traceability requirements

### International Standards

**HIPAA (45 CFR Parts 160, 162, 164)** - US Healthcare Privacy
- Technical safeguards (164.312)
- Physical safeguards (164.310)
- Administrative safeguards (164.308)
- Audit logs retention (6 years)

**HL7 FHIR R4 (v4.0.1)** - Healthcare Interoperability
- Patient, Practitioner, Organization resources
- Observation, Condition, Procedure resources
- MedicationRequest, AllergyIntolerance
- DiagnosticReport, ImagingStudy

**DICOM 3.0** - Medical Imaging
- Image storage and transmission
- Structured reporting
- Patient privacy profiles

**IHE PIX/PDQ** - Patient Identity Cross-referencing
- Patient identifier resolution
- Demographics query
- Cross-facility patient linking

---

## IV. PERFORMANCE CONTRACTS (SLOs)

### Web Application Performance
- **LCP** (Largest Contentful Paint): < 2.5s
- **FID** (First Input Delay): < 100ms
- **CLS** (Cumulative Layout Shift): < 0.1

### Backend API Performance
- **p50 latency**: < 100ms (median response time)
- **p99 latency**: < 500ms (99th percentile)
- **Availability**: 99.95% (21.6 min downtime/month)
- **Concurrent connections**: 2M+

### WASM Plugin Performance
- **Cold start**: < 50ms (first invocation)
- **Hot execution**: < 10ms (cached invocation)
- **Memory limit**: < 50MB per plugin
- **Execution timeout**: 5-30s (configurable)
- **Sandboxing overhead**: < 5%

### Database Performance
- **Query latency**: < 100ms (patient data retrieval)
- **Write latency**: < 50ms (audit logs)
- **Connection pooling**: 20-50 connections per node
- **Read replicas**: 2-3 for analytics workloads

---

## V. ARCHITECTURE PATTERNS

### 1. Host-Plugin Pattern (Elixir + WASM)

**Host Responsibilities** (Elixir):
- Lifecycle management (start, stop, reload)
- Resource allocation (memory, CPU quotas)
- Security enforcement (sandbox, capability-based)
- Communication (function calls, data marshalling)
- Monitoring (health checks, performance metrics)

**Plugin Responsibilities** (WASM):
- Business logic execution
- Content processing (medical text analysis)
- Algorithm implementation (LGPD risk scoring)
- Data transformation (FHIR validation)
- No network access, no file system access

**Communication Flow**:
```
Elixir Host → Extism.call(plugin, "function_name", input) → WASM Plugin
WASM Plugin → host_function() → Elixir Host (capability grant)
```

### 2. Zero Trust Architecture (NIST SP 800-207)

**Principles**:
1. **Verify explicitly**: Multi-factor authentication, continuous validation
2. **Least privilege access**: Role-based access control (RBAC)
3. **Assume breach**: Network microsegmentation, encryption everywhere
4. **Inspect and log**: All traffic monitored and audited

**Components**:
- **Policy Engine** (PE): Elixir GenServer, healthcare trust scoring
- **Policy Enforcement Points** (PEP): API gateway, database interceptor
- **Policy Decision Points** (PDP): Real-time policy evaluation < 100ms
- **Data Sources**: CDM (user/device metadata), LGPD compliance, threat intel

**Trust Algorithm**:
```
Trust Score = f(device_posture, user_behavior, location, credentials, time)
Trust Score ∈ [0, 100]
Access Granted if Trust Score ≥ Threshold (configurable per resource)
```

### 3. Healthcare AI Pipeline (S.1.1 → S.4-1.1-3)

**S.1.1 - LGPD Analyzer**:
- Real-time PII/PHI detection (CPF, RG, medical records)
- Risk scoring (0-100 based on data sensitivity)
- Consent form generation (LGPD Art. 8 compliant)

**S.1.2 - Medical Claims Extractor**:
- Medical statement identification
- Evidence requirement mapping (Level 1-5)
- CFM guideline validation

**S.2-1.2 - Scientific Search**:
- PubMed/SciELO integration (10M+ papers)
- Reference quality scoring (impact factor, citations)
- RAG-powered semantic search

**S.3-2 - SEO Optimizer**:
- Professional profile analysis (CFM registration)
- Medical keyword optimization (avoid clickbait)
- Compliance checking (no false medical claims)

**S.4-1.1-3 - Content Generator**:
- Multi-source consolidation
- Compliance disclaimer injection (LGPD, CFM)
- Audit trail generation (immutable logs)

### 4. Compliance-First Design

**Data Flow Validation**:
```
User Input → LGPD Validator → Business Logic → CFM Validator → Database
                ↓                                      ↓
           Consent Check                        Audit Logger
```

**PHI/PII Protection**:
- Encryption at rest (AES-256-GCM)
- Encryption in transit (TLS 1.3 + PQC)
- Data minimization (collect only necessary)
- Purpose limitation (use only for stated purpose)
- Right to erasure (LGPD Art. 18)

### 5. Real-Time Updates (Phoenix LiveView)

**Server-Rendered**:
- No client-side JavaScript frameworks
- Server maintains WebSocket connection
- Diffs transmitted over wire (minimal bandwidth)

**Healthcare Use Cases**:
- Live patient vitals dashboards
- Real-time lab result notifications
- Collaborative clinical decision support
- Multi-user EHR editing

---

## VI. SECURITY ARCHITECTURE

### Post-Quantum Cryptography (PQC)

**Threat Model**: "Harvest Now, Decrypt Later" attacks
- Adversary collects encrypted medical records today
- Waits for quantum computer (10-20 years)
- Decrypts historical data (violates 50+ year medical record retention)

**Hybrid Encryption** (transition period 5-10 years):
```
TLS 1.3 Handshake:
- KEM: X25519 (classical) + CRYSTALS-Kyber-768 (PQC)
- Signature: Ed25519 (classical) + CRYSTALS-Dilithium3 (PQC)
- Fallback: SPHINCS+ for long-term archival signatures

Performance Overhead:
- KEM: +60% (acceptable for healthcare)
- Signature: +40%
- Total TLS handshake: +300ms (amortized across session)
```

**Key Sizes** (NIST FIPS 203/204):
- Kyber-768: 1184 bytes public key, 2400 bytes ciphertext
- Dilithium3: 1952 bytes public key, 3293 bytes signature
- SPHINCS+-128s: 32 bytes public key, 8080 bytes signature

### WASM Sandbox Security

**Capability-Based Security**:
- No ambient authority (no access by default)
- Explicit host function grants only
- WASI disabled (no file system, no network)

**Resource Limits** (per plugin):
- Memory: 64MB (default) - 512MB (max)
- CPU: 1 vCPU, execution timeout 5-30s
- Variable storage: 1MB (ephemeral)
- No persistent storage

**Security Boundaries**:
```
[Host Process (Elixir)] ←→ [Wasmtime Sandbox] ←→ [Plugin (WASM)]
    Trusted                    Sandboxed              Untrusted
    Full OS access             Limited syscalls        No syscalls
```

**PHI/PII Protection**:
- Automatic sensitive data detection (regex patterns)
- Redaction before plugin invocation
- Output sanitization after plugin execution

### Zero Trust Implementation

**Policy Engine** (Elixir GenServer):
```elixir
defmodule Healthcare.ZeroTrust.PolicyEngine do
  use GenServer

  def evaluate_access(user, resource, context) do
    trust_score = calculate_trust_score(user, context)
    policy = fetch_policy(resource)

    cond do
      trust_score >= policy.threshold ->
        {:allow, audit_log: generate_audit(user, resource, :allow)}

      trust_score >= policy.step_up_threshold ->
        {:step_up_auth, method: :mfa}

      true ->
        {:deny, audit_log: generate_audit(user, resource, :deny)}
    end
  end
end
```

**Continuous Verification**:
- Every API request evaluated (no cached decisions)
- Context includes: device posture, location, time, recent behavior
- Healthcare-specific factors: CFM registration status, medical specialty

---

## VII. DATABASE ARCHITECTURE

### Schema Design (Healthcare-Optimized)

**PHI Tables** (encrypted):
```sql
CREATE TABLE patients (
  id UUID PRIMARY KEY,
  encrypted_cpf BYTEA NOT NULL,  -- LGPD sensitive
  encrypted_name BYTEA NOT NULL,
  date_of_birth DATE,
  created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Audit trail (immutable, TimescaleDB hypertable)
CREATE TABLE audit_logs (
  id BIGSERIAL,
  timestamp TIMESTAMPTZ NOT NULL,
  user_id UUID NOT NULL,
  resource_type VARCHAR(50),
  resource_id UUID,
  action VARCHAR(50),
  trust_score INTEGER,
  metadata JSONB
);

SELECT create_hypertable('audit_logs', 'timestamp');
```

**Compliance Indexes**:
```sql
-- Fast patient lookup (encrypted)
CREATE INDEX idx_patients_encrypted_cpf ON patients USING hash(encrypted_cpf);

-- Audit trail queries (TimescaleDB compression)
CREATE INDEX idx_audit_logs_user_id ON audit_logs(user_id, timestamp DESC);
CREATE INDEX idx_audit_logs_resource ON audit_logs(resource_type, resource_id);

-- Automatic compression after 7 days
ALTER TABLE audit_logs SET (
  timescaledb.compress,
  timescaledb.compress_segmentby = 'user_id',
  timescaledb.compress_orderby = 'timestamp DESC'
);
SELECT add_compression_policy('audit_logs', INTERVAL '7 days');
```

### Data Retention Policies

**LGPD Compliance** (Art. 16):
- Active patient data: Indefinite (medical necessity)
- Inactive patient data: 5 years after last interaction
- Audit logs: 5 years (regulatory requirement)
- Consent records: Duration of processing + 5 years

**HIPAA Compliance**:
- Audit logs: 6 years
- Patient authorizations: 6 years after expiration
- Security incident reports: 6 years

**Automated Deletion**:
```sql
-- TimescaleDB retention policy (LGPD)
SELECT add_retention_policy('audit_logs', INTERVAL '5 years');

-- Anonymization for research (LGPD Art. 13)
CREATE FUNCTION anonymize_old_data() RETURNS void AS $$
BEGIN
  UPDATE patients
  SET encrypted_cpf = encrypt_pseudo_id(id),
      encrypted_name = 'ANONYMIZED'
  WHERE last_access < NOW() - INTERVAL '5 years';
END;
$$ LANGUAGE plpgsql;
```

---

## VIII. INTEGRATION ECOSYSTEM

### Model Context Protocol (MCP) Healthcare Server

**Available Tools**:
1. **validate_medical_claim**: Check medical statement evidence
2. **search_pubmed**: Search 35M+ biomedical papers
3. **analyze_lgpd_risk**: Real-time privacy compliance
4. **validate_fhir_resource**: FHIR R4 structure validation
5. **check_cfm_registration**: Verify medical professional credentials

**Usage Pattern**:
```typescript
// MCP Tool invocation
const result = await mcpServer.callTool("validate_medical_claim", {
  claim: "Aspirina reduz risco cardiovascular em 30%",
  evidence_level_required: "Level 1" // Systematic review
});

// Returns: { valid: true, evidence_found: [...], confidence: 0.95 }
```

### PubMed Integration (NLM E-utilities)

**API Endpoints**:
- `esearch.fcgi`: Search 35M+ papers
- `efetch.fcgi`: Fetch full metadata (title, abstract, authors)
- `elink.fcgi`: Find related articles, citations

**Rate Limits**:
- Without API key: 3 requests/second
- With API key: 10 requests/second
- Implement caching to reduce API calls

**Search Strategy**:
```
Query: "(cardiovascular disease) AND (aspirin) AND (meta-analysis[pt])"
Filters: Publication date (last 5 years), humans, English/Portuguese
Sort by: Relevance, Impact Factor
```

### FHIR R4 Validator

**Resource Validation**:
```elixir
defmodule Healthcare.FHIR.Validator do
  def validate_resource(resource_json) do
    with {:ok, resource} <- Jason.decode(resource_json),
         {:ok, _} <- validate_required_fields(resource),
         {:ok, _} <- validate_cardinality(resource),
         {:ok, _} <- validate_value_sets(resource) do
      {:ok, :valid}
    else
      {:error, reason} -> {:error, reason}
    end
  end
end
```

**Common Validation Errors**:
- Missing `resourceType` field
- Invalid cardinality (0..1, 1..*, etc.)
- ValueSet binding violations
- Invalid reference URLs

---

## IX. DEVELOPMENT PATTERNS

### Error Handling (Elixir)

**Healthcare-Safe Pattern**:
```elixir
defmodule Healthcare.PatientService do
  @moduledoc """
  Patient data operations with safety guarantees.
  """

  def get_patient(patient_id) do
    with {:ok, encrypted_data} <- Repo.get(Patient, patient_id),
         {:ok, decrypted_data} <- Crypto.decrypt(encrypted_data),
         {:ok, _audit} <- AuditLog.log_access(patient_id) do
      {:ok, decrypted_data}
    else
      {:error, :not_found} ->
        {:error, :patient_not_found}

      {:error, :decryption_failed} ->
        # Security incident - alert admin
        SecurityMonitor.alert(:decryption_failure, patient_id)
        {:error, :internal_error}

      {:error, reason} ->
        Logger.error("Patient access failed: #{inspect(reason)}")
        {:error, :internal_error}
    end
  end
end
```

### Testing Strategy

**Minimum Coverage**: 90% for healthcare-critical code

**Test Categories**:
```elixir
# Unit tests
test/healthcare/patient_service_test.exs

# Integration tests (database, external APIs)
test/integration/fhir_integration_test.exs

# Compliance tests (LGPD, HIPAA, CFM)
test/compliance/lgpd_compliance_test.exs

# Security tests (Zero Trust, encryption)
test/security/zero_trust_test.exs

# Performance tests (latency SLOs)
test/performance/api_latency_test.exs
```

**Property-Based Testing** (StreamData):
```elixir
property "patient data roundtrip encryption" do
  check all patient_data <- patient_generator() do
    encrypted = Crypto.encrypt(patient_data)
    decrypted = Crypto.decrypt(encrypted)
    assert decrypted == patient_data
  end
end
```

### Documentation Requirements

**All PHI/PII handling must document**:
1. **Purpose**: Why is this data being collected?
2. **Legal basis**: LGPD Art. 7 (consent, legal obligation, etc.)
3. **Retention**: How long will data be kept?
4. **Access control**: Who can access this data?
5. **Encryption**: At rest and in transit
6. **Audit trail**: All access logged

---

## X. DSM (DEPENDENCY STRUCTURE MATRIX)

### Tag Hierarchy

**L1_DOMAIN** (System layer):
- `infrastructure`: Kubernetes, Istio, networking
- `business_logic`: Application core, domain models
- `data_layer`: PostgreSQL, TimescaleDB, caching
- `integration`: FHIR APIs, MCP, external services
- `security`: Auth, crypto, Zero Trust
- `ui_ux`: Phoenix LiveView, frontend

**L2_SUBDOMAIN** (Domain specificity):
- `healthcare`: PHI/PII, medical workflows
- `compliance`: LGPD, HIPAA, CFM regulations
- `scientific`: Evidence-based medicine, PubMed
- `performance`: Latency, throughput, scalability
- `ai_pipeline`: RAG, embeddings, ML models

**L3_TECHNICAL** (Implementation aspect):
- `architecture`: Design patterns, system design
- `implementation`: Code, algorithms
- `configuration`: Deployment, settings
- `testing`: Unit, integration, E2E tests
- `optimization`: Performance tuning

**L4_SPECIFICITY** (Content type):
- `example`: Code samples
- `reference`: Documentation links
- `guide`: How-to tutorials
- `troubleshooting`: Problem-solving
- `benchmark`: Performance data

### Dependency Types

- `REQUIRES`: A cannot function without B (hard dependency)
- `EXTENDS`: A extends/plugins B (extension relationship)
- `CONFIGURES`: A configures B (configuration dependency)
- `MONITORS`: A monitors B (observability relationship)
- `VALIDATES`: A validates B (validation dependency)
- `INTEGRATES`: A integrates with B (integration point)

### Component Dependency Matrix

```
           01  02  03  04  05  06
01 Elixir   -   Y   Y   Y   Y   N
02 WASM     Y   -   Y   N   Y   N
03 Zero     Y   Y   -   Y   Y   Y
04 MCP      Y   N   Y   -   Y   N
05 Database Y   Y   Y   Y   -   N
06 DevOps   Y   Y   Y   Y   Y   -

01: Elixir Host Platform
02: WASM Plugins
03: Zero Trust Security
04: MCP Healthcare Protocol
05: Database Stack (PostgreSQL + TimescaleDB)
06: Infrastructure & DevOps

Legend:
Y = Depends on
N = No direct dependency
- = Self
```

---

## XI. COMMON TROUBLESHOOTING

### WASM Memory Issues

**Symptom**: Plugin fails with `out of memory` error

**Cause**: Large medical content (>64MB default limit)

**Solution**:
```elixir
# Increase memory limit
@plugin_config %{
  max_memory: 256 * 1024 * 1024,  # 256MB
  timeout_ms: 30_000
}

# Or implement chunking
def process_large_content(content) do
  content
  |> String.split("\n\n")  # Split by paragraphs
  |> Enum.chunk_every(100)  # Process 100 paragraphs at a time
  |> Enum.map(&call_plugin/1)
  |> Enum.join()
end
```

### Zero Trust Policy Conflicts

**Symptom**: Legitimate healthcare access denied

**Cause**: Trust score below threshold (e.g., new device)

**Solution**:
```elixir
# Healthcare-specific policy (prioritize patient safety)
defmodule Healthcare.ZeroTrust.Policy do
  def evaluate(user, resource, context) do
    cond do
      emergency_access?(context) ->
        # Allow with step-up audit
        {:allow, audit_level: :critical}

      cfm_verified?(user) and recent_activity?(user) ->
        # Trust established medical professionals
        {:allow, audit_level: :standard}

      true ->
        # Standard Zero Trust evaluation
        evaluate_trust_score(user, context)
    end
  end
end
```

### PQC Performance Impact

**Symptom**: TLS handshake latency increased by 300ms

**Cause**: PQC key exchange overhead

**Solution**:
```elixir
# Enable TLS session resumption (amortize cost)
config :healthcare_cms, HealthcareCMSWeb.Endpoint,
  https: [
    cipher_suite: :strong,
    session_tickets: :stateful,  # Enable session tickets
    reuse_sessions: true,
    max_connections: 10_000
  ]

# Result: Only first request pays PQC cost
# Subsequent requests: <10ms handshake
```

### LGPD Compliance Violations

**Symptom**: Data retention audit flags old patient records

**Cause**: Missing automated deletion policies

**Solution**:
```sql
-- Implement TimescaleDB retention policy
SELECT add_retention_policy('audit_logs', INTERVAL '5 years');

-- Implement anonymization for research
CREATE FUNCTION anonymize_inactive_patients() RETURNS void AS $$
BEGIN
  UPDATE patients
  SET encrypted_cpf = hash_for_research(id),
      encrypted_name = 'ANONYMIZED',
      anonymized_at = NOW()
  WHERE last_access < NOW() - INTERVAL '5 years'
    AND anonymized_at IS NULL;
END;
$$ LANGUAGE plpgsql;

-- Schedule daily execution
SELECT cron.schedule('anonymize-patients', '0 2 * * *',
  'SELECT anonymize_inactive_patients()');
```

### FHIR Validation Performance

**Symptom**: FHIR validation taking >500ms per resource

**Cause**: Repeated ValueSet lookups, no caching

**Solution**:
```elixir
# Cache FHIR ValueSets in ETS
defmodule Healthcare.FHIR.ValueSetCache do
  use GenServer

  def start_link(_opts) do
    GenServer.start_link(__MODULE__, %{}, name: __MODULE__)
  end

  def init(_state) do
    :ets.new(:fhir_valuesets, [:set, :named_table, :public, read_concurrency: true])
    load_valuesets()
    {:ok, %{}}
  end

  def lookup(valueset_url) do
    case :ets.lookup(:fhir_valuesets, valueset_url) do
      [{^valueset_url, data}] -> {:ok, data}
      [] -> {:error, :not_found}
    end
  end
end

# Result: ValueSet lookups < 1ms (ETS read)
```

---

## XII. KNOWLEDGE BASE COMMANDS

### /kb-validate-source
Validates source credibility and adds to registry.

**Usage**:
```bash
/kb-validate-source <url> <title>
```

**Process**:
1. Check URL against approved/blocked domains
2. Extract metadata (author, publication date)
3. Analyze content quality (code examples, references)
4. Assign validation level (L0-L3)
5. Add to `.claude/sources-registry.yml`

### /kb-add-reference
Adds pre-validated reference to knowledge base.

**Usage**:
```bash
/kb-add-reference <technology> <url> <validation_level> \
  --title "Title" \
  --author "Author" \
  --date "YYYY-MM-DD"
```

**Example**:
```bash
/kb-add-reference elixir \
  https://hexdocs.pm/phoenix/Phoenix.LiveView.html \
  L0_CANONICAL \
  --title "Phoenix LiveView Documentation" \
  --version "1.0.1"
```

### /kb-search-tech
Searches knowledge base by technology or concept.

**Usage**:
```bash
/kb-search-tech <query> \
  [--filter <technology>] \
  [--level <validation_level>] \
  [--format <output_format>]
```

**Examples**:
```bash
# Find all security standards
/kb-search-tech "NIST" --filter security --level L0_CANONICAL

# Find Phoenix performance resources
/kb-search-tech "Phoenix performance" --format markdown

# Find healthcare compliance docs
/kb-search-tech compliance --filter healthcare
```

---

## XIII. QUICK REFERENCE

### Elixir/Phoenix Commands
```bash
# Start development server
mix phx.server

# Run all tests
mix test

# Run compliance tests only
mix test test/compliance/

# Run with coverage
mix test --cover

# Interactive shell
iex -S mix phx.server

# Database migrations
mix ecto.migrate
mix ecto.rollback

# Code formatting
mix format

# Static analysis
mix credo --strict
mix dialyzer
```

### WASM Plugin Development
```bash
# Compile Rust plugin
cargo build --target wasm32-unknown-unknown --release

# Optimize WASM binary
wasm-opt -O3 -o optimized.wasm target/wasm32-unknown-unknown/release/plugin.wasm

# Test plugin with Extism CLI
extism call plugin.wasm function_name --input "test data"

# Benchmark plugin
extism call plugin.wasm function_name --input-file input.txt --benchmark 1000
```

### Database Operations
```sql
-- Check TimescaleDB hypertables
SELECT * FROM timescaledb_information.hypertables;

-- Check compression status
SELECT * FROM timescaledb_information.compression_settings;

-- Manual compression
SELECT compress_chunk('_timescaledb_internal._hyper_1_1_chunk');

-- Check retention policies
SELECT * FROM timescaledb_information.jobs WHERE proc_name = 'policy_retention';
```

### Kubernetes/DevOps
```bash
# Deploy to staging
kubectl apply -f k8s/staging/

# Check pod status
kubectl get pods -n healthcare-cms

# View logs
kubectl logs -f deployment/healthcare-cms -n healthcare-cms

# Port forward for debugging
kubectl port-forward svc/healthcare-cms 4000:4000 -n healthcare-cms

# Check Istio traffic
istioctl dashboard kiali
```

---

## XIV. CRITICAL SUCCESS FACTORS

1. **Patient safety is paramount**: All decisions prioritize patient safety
2. **Compliance is non-negotiable**: Cannot compromise LGPD/HIPAA/CFM
3. **Encryption everywhere**: PHI/PII encrypted at rest and in transit
4. **Zero Trust always**: No implicit trust, continuous verification
5. **Real-time performance**: Healthcare workflows require <100ms latency
6. **Fault tolerance**: Erlang/OTP supervision, no single point of failure
7. **Audit everything**: Immutable logs for all PHI/PII access
8. **Evidence-based**: Medical claims backed by L1 evidence (systematic reviews)

---

## XV. VALIDATION LEVELS QUICK REFERENCE

| Level | Score | Description | Examples |
|-------|-------|-------------|----------|
| L0_CANONICAL | 100 | Official docs, standards | elixir-lang.org, NIST FIPS |
| L1_ACADEMIC | 90 | Peer-reviewed research | ACM, IEEE, arXiv |
| L2_VALIDATED | 75 | Industry whitepapers | Company blogs, conferences |
| L3_COMMUNITY | 50 | Community content | Stack Overflow, GitHub |

---

**END OF CONSOLIDATED LLM CONTEXT**

This file provides complete context for LLM optimization when working with the Healthcare WASM-Elixir Stack. All information is validated and sourced from official documentation (L0_CANONICAL) or peer-reviewed research (L1_ACADEMIC).